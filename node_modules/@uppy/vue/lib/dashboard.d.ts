import { type PropType } from 'vue';
import { type DashboardOptions } from '@uppy/dashboard';
import type { Uppy, Meta, Body } from '@uppy/core';
type DashboardInlineOptions<M extends Meta, B extends Body> = Omit<DashboardOptions<M, B> & {
    inline: true;
}, 'inline'>;
declare const _default: import("vue").DefineComponent<{
    uppy: {
        type: PropType<Uppy<any, any>>;
        required: true;
    };
    props: {
        type: PropType<DashboardInlineOptions<any, any>>;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    uppy: {
        type: PropType<Uppy<any, any>>;
        required: true;
    };
    props: {
        type: PropType<DashboardInlineOptions<any, any>>;
    };
}>>, {}, {}>;
export default _default;
//# sourceMappingURL=dashboard.d.ts.map