import { type Ref } from 'vue';
import type { CommonUseAuthReturn, GetSessionOptions, SecondarySignInOptions, SignInFunc, SignOutFunc, SignUpOptions } from '../../types.js';
import type { SessionData } from '#auth';
type Credentials = {
    username?: string;
    email?: string;
    password?: string;
} & Record<string, any>;
declare const signIn: SignInFunc<Credentials, any>;
declare const signOut: SignOutFunc;
declare function getSession(getSessionOptions?: GetSessionOptions): Promise<SessionData | null | void>;
declare function signUp(credentials: Credentials, signInOptions?: SecondarySignInOptions, signUpOptions?: SignUpOptions): Promise<any>;
/**
 * Returns an extended version of CommonUseAuthReturn with local-provider specific data
 *
 * @remarks
 * The returned value `refreshToken` will always be `null` if `refresh.isEnabled` is `false`
 */
interface UseAuthReturn extends CommonUseAuthReturn<typeof signIn, typeof signOut, typeof getSession, SessionData> {
    signUp: typeof signUp;
    token: Readonly<Ref<string | null>>;
    refreshToken: Readonly<Ref<string | null>>;
}
export declare function useAuth(): UseAuthReturn;
export {};
