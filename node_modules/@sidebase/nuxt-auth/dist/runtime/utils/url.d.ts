interface RuntimeConfig {
    public: {
        auth: {
            baseURL: string;
            disableInternalRouting: boolean;
            originEnvKey: string;
        };
    };
}
/** https://auth.sidebase.io/guide/application-side/configuration#baseurl */
export declare function resolveApiUrlPath(endpointPath: string, runtimeConfig: RuntimeConfig): string;
export declare function resolveApiBaseURL(runtimeConfig: RuntimeConfig, returnOnlyPathname?: boolean): string;
/** Slimmed down auth runtime config for `determineCallbackUrl` */
interface AuthRuntimeConfigForCallbackUrl {
    globalAppMiddleware: {
        addDefaultCallbackUrl?: string | boolean;
    } | boolean;
}
/**
 * Determines the desired callback url based on the users desires. Either:
 * - uses a hardcoded path the user provided,
 * - determines the callback based on the target the user wanted to reach
 *
 * @param authConfig Authentication runtime module config
 * @param getOriginalTargetPath Function that returns the original location the user wanted to reach
 */
export declare function determineCallbackUrl<T extends string | Promise<string>>(authConfig: AuthRuntimeConfigForCallbackUrl, getOriginalTargetPath: () => T): T | string | undefined;
/**
 * Naively checks if a URL is external or not by comparing against its protocol.
 *
 * URL being valid is not a concern for this function as it is used with developer-controlled inputs.
 */
export declare function isExternalUrl(url: string): boolean;
export {};
